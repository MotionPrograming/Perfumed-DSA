#include <bits/stdc++.h>

using namespace std;

// Define a node structure for our stack
struct Node {
    char data;     // To store bracket character
    Node* next;    // Pointer to the next node
};

// Initialize the top of the stack (head of the linked list)
Node* head = nullptr;

// Function to push a character onto the stack
void push(char x) {
    Node* temp = new Node();  // Allocate new node
    temp->data = x;           // Set data
    temp->next = head;        // Point to previous top
    head = temp;              // Update head to new top
}

// Function to pop the top character from the stack
char pop() {
    if (head == nullptr) return '\0';  // Stack underflow check

    Node* temp = head;        // Temporary pointer to top
    char value = temp->data;  // Store data to return
    head = head->next;        // Move head to next node
    delete temp;              // Delete old top node
    return value;             // Return popped value
}

// Function to check if the stack is empty
bool isEmpty() {
    return head == nullptr;
}

// Function to check if the input string has balanced brackets
bool isBalanced(const char* str) {
    int length = strlen(str);

    for (int i = 0; i < length; i++) {
        char ch = str[i];

        // If opening bracket, push onto stack
        if (ch == '(' || ch == '{' || ch == '[') {
            push(ch);
        }
        // If closing bracket, check if it matches the last opening bracket
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (isEmpty()) return false;  // No matching opening bracket

            char topChar = pop();  // Get the top of the stack

            // Check for mismatch
            if ((ch == ')' && topChar != '(') ||
                (ch == '}' && topChar != '{') ||
                (ch == ']' && topChar != '[')) {
                return false;
            }
        }
    }

    // If stack is empty, all brackets matched properly
    return isEmpty();
}

// Main function to get user input and check for balance
int main() {
    char str[100];

    cout << "Enter a string containing brackets (e.g., (), {}, []): ";
    cin >> str;

    if (isBalanced(str)) {
        cout << "Balanced!" << endl;
    } else {
        cout << "Not Balanced!" << endl;
    }

    return 0;
}
