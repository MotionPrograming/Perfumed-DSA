#include <bits/stdc++.h>
using namespace std;

struct Node {
    char data;
    Node* next;
};

Node* head = nullptr;

// Push element onto stack
void push(char x) {
    Node* temp = new Node();
    temp->data = x;
    temp->next = head;
    head = temp;
}

// Pop element from stack
char pop() {
    if (head == nullptr) return '\0'; // stack empty
    Node* temp = head;
    char value = temp->data;
    head = head->next;
    delete temp;
    return value;
}

// Check if stack is empty
bool isEmpty() {
    return head == nullptr;
}

// Check if string has balanced brackets
bool isBalanced(const char* str) {
    int length = strlen(str);
    for (int i = 0; i < length; i++) {
        char ch = str[i];
        if (ch == '(' || ch == '{' || ch == '[') {
            push(ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            if (isEmpty()) return false; // nothing to match
            char topChar = pop();
            if ((ch == ')' && topChar != '(') ||
                (ch == '}' && topChar != '{') ||
                (ch == ']' && topChar != '[')) {
                return false;
            }
        }
    }
    return isEmpty(); // stack should be empty if balanced
}

int main() {
    char str[100];
    cout << "Enter a string of parentheses/braces/brackets: ";
    cin >> str;

    if (isBalanced(str)) {
        cout << "Balanced!" << endl;
    } else {
        cout << "Not Balanced!" << endl;
    }

    return 0;
}
