#include <iostream>
#include <string.h>
using namespace std;

// Node structure for stack
struct Node {
    char data;
    Node* next;
};

// Stack operations
Node* head = NULL;

// Push an element onto the stack
void push(char x) {
    Node* temp = new Node;
    temp->data = x;
    temp->next = head;
    head = temp;
}

// Pop an element from the stack
char pop() {
    if (head == NULL) {
        return '\0';  // Stack underflow
    }
    char popped = head->data;
    Node* temp = head;
    head = head->next;
    delete temp;
    return popped;
}

// Check for matching pair
bool isMatching(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

// Check if the expression is balanced
bool isBalanced(const char* expr) {
    for (int i = 0; expr[i] != '\0'; i++) {
        char ch = expr[i];
        if (ch == '(' || ch == '{' || ch == '[') {
            push(ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            char topChar = pop();
            if (!isMatching(topChar, ch)) {
                return false;
            }
        }
    }
    return head == NULL;  // Stack should be empty if balanced
}

int main() {
    char expr[100];
    cout << "Enter parenthesis: ";
    cin >> expr;

    if (isBalanced(expr)) {
        cout << "Balanced!" << endl;
    } else {
        cout << "Not Balanced!" << endl;
    }

    return 0;
}
