#include <bits/stdc++.h>
using namespace std;

// Node structure for stack
struct Node {
    char data;
    Node* next;
};

// Stack operations
Node* head = NULL;

// Push an element onto the stack
void push(char x) {
  Node*temp = new Node();
  temp->data = x;
  temp->next = head;
  head = temp;
}

// Pop an element from the stack
char pop() {
    if(head == NULL)return '\0';
    
    char x = head->data;
    Node*temp = head;
    head = head->next;
    
    delete temp;
    return x;

}


bool isMatching(char open,char close){
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']') ;
    
}



bool isEmpty() {
    return head == NULL;
}

bool isBalanced(const char* c){
    for(int i = 0; c[i] != '\0'; i++){
        char ch = c[i];
        
        if(ch == '(' || ch == '{' || ch == '['){   
            push(ch);
        }
        else if (ch == ')' || ch == '}' || ch == ']'){  
            if (isEmpty())  
                return false;
                
            char v = pop();
            if(!isMatching(v, ch)){
                return false;
            }
        }
    }
    return isEmpty();
}



int main() {
    char c[100];
    cout << "Enter parenthesis: ";
    cin >> c;

    if (isBalanced(c)) {
        cout << "Balanced!" << endl;
    } else {
        cout << "Not Balanced!" << endl;
    }

    return 0;
}
