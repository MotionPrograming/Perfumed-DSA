#include <bits/stdc++.h>
using namespace std;

struct BstNode {
    int data;
    BstNode* left;
    BstNode* right;
};

BstNode* createNode(int value) {
    BstNode* NewNode = new BstNode();
    NewNode->data = value;
    NewNode->left = NULL;
    NewNode->right = NULL;
    return NewNode;
}

BstNode* insert(BstNode* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }

    if (value <= root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

void inorder(BstNode* root) {
    if (root == nullptr) {
        return;
    }

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int findMinValue(BstNode* root) {
    if (root == nullptr) {
        cout << "The tree is empty.\n";
        return -1;
    }

    while (root->left != nullptr) {
        root = root->left;
    }

    return root->data;
}

int main() {
    BstNode* root = nullptr;

    root = insert(root, 50);
    root = insert(root, 100);
    root = insert(root, 200);
    root = insert(root, 11);
    root = insert(root, 111);
    root = insert(root, 0);

    cout << "Inorder traversal of the BST: ";
    inorder(root);
    cout << endl;

    cout << "Minimum value in the BST: " << findMinValue(root) << endl;

    return 0;
}
