// Total time complexity = O(nlogn): sorting +  binary search
//sort(v.begin(), v.end());                       // Step 1: Sort the container
//binary_search(v.begin(), v.end(), x);           // Step 2: Use binary_search
#include <bits/stdc++.h>
using namespace std;

int n;
vector<int> v;

int binary(int l, int r, int x) {
    while (l <= r) {
        int mid = (l + r) / 2;

        if (v[mid] == x) return mid;
        else if (v[mid] < x) l = mid + 1;
        else r = mid - 1;
    }

    return -1; // if x doesn't exist
}

int main() {
    cin >> n;
    v.resize(n);

    for (int i = 0; i < n; i++) cin >> v[i];

    sort(v.begin(), v.end()); // Binary search requires sorted array

    int x;
    cin >> x; // Value to search for

    int result = binary(0, n - 1, x);
    cout << endl << result << endl;

    return 0;
}
