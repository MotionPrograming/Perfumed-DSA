#include <bits/stdc++.h>
using namespace std;

int heap[100];
int heapSize;

// Heapify for max-heap
void heapify(int i) {
    int largest = i;
    int left = i * 2 + 1;
    int right = i * 2 + 2;

    if (left < heapSize && heap[left] > heap[largest]) largest = left;
    if (right < heapSize && heap[right] > heap[largest]) largest = right;

    if (largest != i) {
        swap(heap[i], heap[largest]);
        heapify(largest);
    }
}

// Build heap
void makeHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--) {
        heapify(i);
    }
}

// Heap sort
void heapSort() {
    makeHeap();
    int originalSize = heapSize;
    for (int i = heapSize - 1; i > 0; i--) {
        swap(heap[0], heap[i]);
        heapSize--;
        heapify(0);
    }
    heapSize = originalSize; // restore for printing
}

// Delete max element
void deleteMax() {
    if (heapSize == 0) return;

    heap[0] = heap[heapSize - 1];
    heapSize--;
    heapify(0);
}

// Print heap
void print(const string &level) {
    cout << level << ": ";
    for (int i = 0; i < heapSize; i++) cout << heap[i] << " ";
    cout << endl;
}

int main() {
    cin >> heapSize;

    for (int i = 0; i < heapSize; i++) {
        cin >> heap[i];
    }
    print("Initial array");

    string command;
    while (true) {
        cin >> command;
        if (command == "sort") {
            heapSort();
            print("Sorted array");
        } else if (command == "heap") {
            makeHeap();
            print("Max-Heap");
        } else if (command == "delete") {
            deleteMax();
            print("Heap after delete");
        } else if (command == "exit") {
            break;
        } else {
            cout << "Unknown command!" << endl;
        }
    }
}
